import numpy as np
import numpy.testing as npt
import pytest

import pynbody
import pynbody.test_utils

pytestmark = pytest.mark.filterwarnings("ignore:No log file found:UserWarning")

@pytest.fixture(scope='module', autouse=True)
def get_data():
    pynbody.test_utils.ensure_test_data_available("gasoline_ahf")

@pytest.fixture
def snap():
    return pynbody.load("testdata/gasoline_ahf/g15784.lr.01024")

def test_v1_iontable(snap):
    ref = np.array([0.07527991, 0.06456315, 0.08380653, 0.15143689, 0.15568259,
       0.09593283, 0.15549068, 0.13407668, 0.15177078, 0.14166734,
       0.06554151, 0.13197516, 0.08851156, 0.06210035, 0.09224193,
       0.162001  , 0.16017458, 0.06572785, 0.16384523, 0.1621215 ,
       0.15005151, 0.15224003, 0.1580059 , 0.1606176 , 0.16919882,
       0.15257504, 0.15542396, 0.15950106, 0.15208175, 0.06277352,
       0.16297019, 0.16536367, 0.15913841, 0.16852261, 0.16592073,
       0.16994837, 0.13997742, 0.16381589, 0.16592951, 0.16631843,
       0.12965855, 0.16823705, 0.16560094, 0.16819444, 0.15564206,
       0.15821792, 0.1596779 , 0.15242394, 0.16538892, 0.16265422,
       0.1698232 , 0.16823449, 0.16036913, 0.13258314, 0.16295899,
       0.16926536, 0.16349818, 0.07734905, 0.16657909, 0.16847497,
       0.16370438, 0.17016328, 0.16424645, 0.14292659, 0.17001509,
       0.16708861, 0.17015931, 0.06657929, 0.16794139, 0.16821759,
       0.16128866, 0.14454934, 0.16137588, 0.16934885, 0.17008926,
       0.16986069, 0.16963654, 0.14639736, 0.16590415, 0.16879675,
       0.16349512, 0.16999227, 0.17003994, 0.15351041, 0.16446416,
       0.14130995, 0.1636267 , 0.17015097, 0.16989277, 0.16982946,
       0.17006758, 0.16906539, 0.16315827, 0.17021533, 0.16991691,
       0.17006688, 0.17006756, 0.16753875, 0.15553802, 0.15892623])

    with pynbody.analysis.ionfrac.use_custom_ion_table('v1'):
        arr = pynbody.analysis.ionfrac.calculate(snap, 'ovi')
    npt.assert_allclose(arr[0:100], ref)

def test_hm12_iontable(snap):
    ovi = np.array([6.79780345e-005, 1.21961437e-003, 2.10258808e-003, 4.41904998e-004,
       2.51917779e-002, 1.43015846e-004, 6.22114338e-003, 4.29569571e-002,
       1.01958419e-002, 4.48283490e-003, 4.94065646e-324, 2.20499607e-002,
       1.47744129e-004, 2.25775610e-002, 4.00605615e-003, 4.94065646e-324,
       2.25256550e-003, 1.45476692e-002, 5.22759972e-003, 2.88720945e-004,
       4.89377443e-002, 4.59232618e-003, 1.89438144e-002, 4.23855618e-002,
       3.33423220e-003, 3.20733862e-004, 2.75898847e-003, 5.76463308e-003,
       2.73179097e-005, 1.10537226e-001, 3.56529774e-003, 2.63819145e-003,
       4.19770194e-002, 3.54343904e-002, 9.10365916e-002, 1.39668760e-002,
       4.94065646e-324, 4.45439066e-002, 9.87295530e-007, 3.83575616e-003,
       3.26337428e-003, 2.01659651e-003, 4.54879430e-003, 8.87575988e-003,
       6.39119532e-002, 4.44628440e-002, 5.20207632e-003, 2.83486560e-004,
       8.31801640e-004, 1.73934644e-001, 1.16092065e-001, 4.44657338e-003,
       5.20522959e-002, 4.57364560e-002, 3.60641075e-002, 2.22581780e-002,
       2.42330034e-002, 1.45377934e-001, 8.59324862e-002, 8.67482931e-002,
       1.12455347e-001, 1.35057787e-001, 2.75730079e-002, 4.95593314e-003,
       3.79137434e-003, 3.82615243e-003, 1.38997828e-002, 4.94065646e-324,
       3.02577165e-002, 8.56117054e-003, 8.30922237e-003, 3.72559856e-005,
       5.94334801e-002, 4.44246181e-002, 4.67536673e-002, 3.26974288e-003,
       7.17534644e-002, 6.87281281e-002, 2.70368570e-003, 9.84547186e-002,
       4.09146764e-002, 4.94065646e-324, 1.09499118e-001, 8.03578206e-002,
       2.98066793e-002, 2.91550196e-002, 2.31943332e-002, 3.90576446e-003,
       1.51452306e-003, 2.20991449e-002, 1.33454179e-005, 3.87049935e-003,
       8.81651951e-003, 2.03920952e-002, 3.44782640e-004, 1.73445108e-002,
       1.06629989e-002, 2.07595825e-002, 5.43656906e-002, 5.56131616e-004,
       1.54094794e-002, 2.43696804e-002, 3.38237556e-003, 6.13884895e-002,
       4.07554341e-003, 1.95388752e-002, 7.58049749e-003, 2.28593194e-004,
       3.80973924e-002, 4.96592224e-004, 7.34418906e-002, 3.32936609e-002,
       3.34664560e-003, 1.22415197e-003, 1.34598594e-002, 2.70781498e-002,
       4.62049557e-002, 8.18981476e-003, 4.91912246e-002, 3.73555573e-003,
       5.39730513e-007, 1.79304425e-003, 6.54961599e-002, 4.39430419e-003,
       1.23365875e-002, 4.05614770e-003, 6.73684207e-002, 6.12757624e-002,
       9.86986451e-004, 1.13839643e-006, 2.75642941e-002, 1.71112537e-002,
       2.08004727e-002, 7.02138033e-002, 7.25648917e-003, 4.56857593e-002,
       6.77147986e-003, 2.96013091e-003, 9.82478937e-002, 4.86910330e-002,
       3.62854886e-003, 1.22328090e-002, 7.91409130e-003, 1.13364657e-001,
       5.21164129e-003, 3.50183532e-003, 7.03622447e-004, 1.68875590e-002,
       3.03195386e-003, 3.17684479e-003, 1.13785500e-001, 4.18718974e-002,
       2.91012181e-003, 2.43513355e-003, 3.21797320e-003, 9.57525036e-002,
       8.11164881e-002, 6.84237745e-002, 5.75157222e-002])

    hi = np.array([3.06281941e-07, 1.02795772e-06, 1.33765232e-07, 7.61206610e-07,
       1.85777168e-06, 3.68816888e-07, 2.11459602e-06, 9.96174587e-07,
       2.69406473e-06, 2.78623083e-07, 4.25314427e-01, 4.43794669e-06,
       4.01882737e-07, 3.81859798e-06, 2.34532989e-07, 9.82401123e-01,
       9.40720858e-07, 2.33144197e-06, 2.79406369e-07, 4.44431662e-07,
       7.34410745e-06, 2.59119522e-07, 1.14757485e-06, 9.58658619e-07,
       2.09016995e-07, 6.35205323e-07, 1.32340083e-06, 2.03011561e-06,
       2.06774056e-07, 1.45609624e-06, 2.11408688e-07, 1.57215904e-07,
       1.02720854e-06, 1.08779930e-06, 4.02280242e-06, 4.58660094e-07,
       6.93343073e-01, 7.03605172e-06, 7.18082793e-08, 2.23979359e-07,
       1.94917788e-07, 1.29732528e-07, 2.54275563e-07, 3.73081976e-07,
       8.96438921e-06, 2.13692656e-06, 3.35210859e-07, 6.45547731e-07,
       9.24395041e-08, 2.22439461e-05, 2.55749580e-06, 2.89042359e-07,
       7.78144084e-06, 1.77606647e-06, 1.58053434e-06, 2.97571616e-06,
       5.72976218e-07, 1.80951297e-05, 1.08838478e-05, 1.16474022e-05,
       1.10057169e-05, 1.67784399e-05, 5.34578532e-06, 5.19004947e-07,
       2.30819511e-07, 2.28945390e-07, 2.21136463e-06, 8.16386350e-01,
       6.35354924e-07, 3.89202061e-07, 3.58988669e-07, 2.20779485e-07,
       8.61314368e-06, 6.67931583e-06, 9.66725790e-07, 1.95997809e-07,
       8.36085882e-07, 7.50760445e-06, 1.81388840e-07, 1.69176370e-06,
       6.18830446e-06, 1.29293023e-01, 4.41693544e-06, 3.50362772e-06,
       5.18457192e-06, 6.07073049e-07, 7.02013069e-07, 2.30856505e-07,
       8.50260858e-07, 1.60309192e-06, 1.51961010e-07, 2.27320184e-07,
       3.76759352e-07, 9.24394730e-07, 4.73317903e-07, 5.08173010e-07,
       1.40637502e-06, 4.55258092e-06, 7.90100145e-06, 5.99374322e-07,
       2.52225906e-06, 6.00965265e-07, 1.56484625e-06, 1.65926595e-06,
       2.45809777e-07, 3.98808942e-06, 1.94411981e-06, 3.26116082e-07,
       2.71317406e-06, 4.38123761e-07, 1.48955687e-06, 2.43821498e-06,
       1.15977893e-06, 1.08477673e-06, 3.41419368e-06, 5.16572409e-06,
       1.07110735e-06, 7.33666606e-07, 7.67128682e-07, 1.59434682e-06,
       4.96306922e-08, 1.05276617e-06, 1.29519662e-06, 2.47728973e-07,
       1.43375319e-06, 2.32659637e-07, 9.43296876e-06, 8.41497396e-06,
       5.34057647e-07, 4.24992628e-08, 5.42276569e-06, 4.89141986e-07,
       5.45179623e-07, 9.53321494e-06, 3.41123124e-07, 7.16916062e-06,
       6.45300053e-07, 1.82440126e-07, 1.26309458e-05, 3.32028402e-06,
       2.30166813e-07, 4.32756567e-07, 3.53491690e-07, 1.39378964e-05,
       1.86142874e-06, 2.12808617e-07, 8.96344749e-07, 4.96886688e-07,
       1.81597216e-07, 1.91407301e-07, 1.44749376e-05, 7.06877886e-07,
       1.54384295e-06, 2.24390215e-07, 1.92507887e-07, 1.15401093e-06,
       4.75727865e-06, 8.94539386e-06, 7.34332257e-06])


    with pynbody.analysis.ionfrac.use_custom_ion_table('hm12'):
        test_ovi = pynbody.analysis.ionfrac.calculate(snap, 'OVI')
        test_hi = pynbody.analysis.ionfrac.calculate(snap, 'HI')

    npt.assert_allclose(test_ovi[::1000], ovi)
    npt.assert_allclose(test_hi[::1000], hi)


def test_fg20_iontable(snap):
    ovi = np.array([8.65474880e-005, 1.61668166e-003, 2.09798702e-003, 5.75812545e-004,
       3.17069132e-002, 1.82955641e-004, 8.45415390e-003, 5.19672915e-002,
       1.39285761e-002, 4.44547963e-003, 4.94065646e-324, 3.08093734e-002,
       1.89179643e-004, 2.96140629e-002, 3.99489817e-003, 4.94065646e-324,
       2.94142630e-003, 1.88944174e-002, 5.22518882e-003, 3.70993062e-004,
       6.82394391e-002, 4.57933579e-003, 2.44280582e-002, 5.10257371e-002,
       3.32157108e-003, 4.16704137e-004, 3.65777851e-003, 7.81643136e-003,
       3.44954184e-005, 1.24121512e-001, 3.55633705e-003, 2.63121649e-003,
       5.10969738e-002, 4.39798813e-002, 8.58889725e-002, 1.39805444e-002,
       4.94065646e-324, 6.27562091e-002, 1.21038645e-006, 3.82989578e-003,
       3.25777323e-003, 2.01192402e-003, 4.54260933e-003, 8.85356306e-003,
       8.89407117e-002, 5.34486021e-002, 5.14496895e-003, 3.66432776e-004,
       8.32013524e-004, 1.87437218e-001, 1.05010550e-001, 4.38805082e-003,
       7.26049249e-002, 5.50901261e-002, 4.49612649e-002, 2.83271519e-002,
       2.44195030e-002, 1.66120346e-001, 1.14397665e-001, 1.19931320e-001,
       9.99280727e-002, 1.79485932e-001, 3.88000395e-002, 5.95178616e-003,
       3.77536533e-003, 3.81302355e-003, 1.80414622e-002, 4.94065646e-324,
       3.08547864e-002, 8.54199519e-003, 8.28772425e-003, 4.71437250e-005,
       8.28384614e-002, 6.14132016e-002, 5.56113607e-002, 3.26378451e-003,
       7.17671195e-002, 7.81882747e-002, 2.67976785e-003, 1.08366791e-001,
       5.55681071e-002, 4.94065646e-324, 7.26300506e-002, 8.02457683e-002,
       4.14611488e-002, 2.93258763e-002, 2.61135893e-002, 3.89389845e-003,
       1.97184990e-003, 2.81427126e-002, 1.67345804e-005, 3.86250080e-003,
       8.78962332e-003, 2.58166724e-002, 4.43658387e-004, 1.74522048e-002,
       1.38664046e-002, 2.90695689e-002, 7.57571054e-002, 7.18703765e-004,
       2.00653749e-002, 2.50034581e-002, 4.53629064e-003, 7.22949317e-002,
       4.05652573e-003, 2.70723869e-002, 9.98319346e-003, 2.93160012e-004,
       4.58235779e-002, 6.41111529e-004, 8.68113051e-002, 4.07076285e-002,
       4.38407749e-003, 1.62563069e-003, 1.87126199e-002, 3.79934142e-002,
       5.60366515e-002, 1.05284128e-002, 5.07736808e-002, 5.00366371e-003,
       6.60722824e-007, 2.35335197e-003, 7.82087567e-002, 4.38938844e-003,
       1.60112665e-002, 4.04789136e-003, 9.37138025e-002, 8.35975062e-002,
       1.28208002e-003, 1.37116840e-006, 3.87185029e-002, 1.71074189e-002,
       2.09673458e-002, 9.72996239e-002, 7.23098495e-003, 6.42410721e-002,
       8.55983962e-003, 2.94686918e-003, 1.33193149e-001, 5.66129706e-002,
       3.60809078e-003, 1.22263513e-002, 7.88966118e-003, 1.51758470e-001,
       7.01896717e-003, 3.49185068e-003, 9.23739325e-004, 1.69449486e-002,
       3.02611123e-003, 3.16845276e-003, 1.53417273e-001, 4.25887915e-002,
       3.92521226e-003, 2.36658512e-003, 3.21223136e-003, 1.06702067e-001,
       7.98403599e-002, 9.15078050e-002, 7.13210391e-002])

    hi = np.array([1.88130889e-07, 6.31047012e-07, 1.33752563e-07, 4.67017866e-07,
       1.41457999e-06, 2.28244073e-07, 1.30024339e-06, 9.01455735e-07,
       1.65732809e-06, 2.74899393e-07, 3.40048737e-01, 2.72631519e-06,
       2.47183202e-07, 2.39013372e-06, 2.34071445e-07, 9.78257477e-01,
       6.09211109e-07, 1.54272935e-06, 2.79406369e-07, 2.78845496e-07,
       4.51758864e-06, 2.58550946e-07, 9.22753577e-07, 8.71408433e-07,
       2.08023390e-07, 3.89961085e-07, 8.17328050e-07, 1.24843475e-06,
       1.27111396e-07, 1.37203905e-06, 2.11336655e-07, 1.57163116e-07,
       9.23054464e-07, 9.50647624e-07, 3.30874050e-06, 4.54329524e-07,
       6.25410513e-01, 4.32189610e-06, 4.37866918e-08, 2.23664465e-07,
       1.94691428e-07, 1.29732528e-07, 2.54039744e-07, 3.71370645e-07,
       5.51238076e-06, 1.71978474e-06, 3.21662587e-07, 3.95834455e-07,
       9.23221017e-08, 1.37294741e-05, 2.32791049e-06, 2.82981377e-07,
       4.78232259e-06, 1.48137872e-06, 1.30199669e-06, 1.98869983e-06,
       5.67052131e-07, 1.11619878e-05, 6.68856971e-06, 7.15336406e-06,
       7.71856758e-06, 1.03133417e-05, 3.28276478e-06, 4.24125943e-07,
       2.29607801e-07, 2.28161219e-07, 1.47357068e-06, 7.70372391e-01,
       6.24146261e-07, 3.81011382e-07, 3.57979768e-07, 1.36312137e-07,
       5.29025698e-06, 4.09982867e-06, 8.86641549e-07, 1.95991360e-07,
       8.36085882e-07, 4.93112836e-06, 1.79628492e-07, 1.55517801e-06,
       3.80977939e-06, 8.83898169e-02, 3.97682365e-06, 2.87297026e-06,
       3.18652308e-06, 6.02953014e-07, 6.43046444e-07, 2.30293510e-07,
       5.40625723e-07, 1.23356342e-06, 9.35885631e-08, 2.27178184e-07,
       3.73710658e-07, 7.81524758e-07, 2.97575373e-07, 5.00985008e-07,
       1.00789929e-06, 2.79703657e-06, 4.86002952e-06, 3.74489171e-07,
       1.64875104e-06, 5.84329302e-07, 9.62509991e-07, 1.45002029e-06,
       2.44185303e-07, 2.45142219e-06, 1.22622612e-06, 2.12165860e-07,
       2.03800225e-06, 2.87693403e-07, 1.34378163e-06, 1.83208828e-06,
       7.47735778e-07, 6.65872208e-07, 2.10033579e-06, 3.17522112e-06,
       9.65903235e-07, 5.84232540e-07, 7.52511918e-07, 9.80805913e-07,
       3.03271692e-08, 6.53129281e-07, 1.17655817e-06, 2.47302891e-07,
       1.04368855e-06, 2.32626575e-07, 5.79350102e-06, 5.16656380e-06,
       3.59686807e-07, 2.68645445e-08, 3.33396115e-06, 4.87607242e-07,
       5.37939262e-07, 5.86410997e-06, 3.38709167e-07, 4.40140118e-06,
       5.17675875e-07, 1.81890760e-07, 7.76651854e-06, 2.49372917e-06,
       2.28318931e-07, 4.29220263e-07, 3.51628568e-07, 8.55486244e-06,
       1.14510874e-06, 2.12393990e-07, 5.49769038e-07, 4.91764057e-07,
       1.81580222e-07, 1.91227058e-07, 8.89388773e-06, 6.98554659e-07,
       9.48670714e-07, 2.15540344e-07, 1.92404770e-07, 1.10626246e-06,
       3.70321414e-06, 5.50644380e-06, 4.60903918e-06])

    with pynbody.analysis.ionfrac.use_custom_ion_table('fg20'):
      test_ovi = pynbody.analysis.ionfrac.calculate(snap, 'OVI')
      test_hi = pynbody.analysis.ionfrac.calculate(snap, 'HI')

    npt.assert_allclose(test_ovi[::1000], ovi)
    npt.assert_allclose(test_hi[::1000], hi)

def test_default():
    assert isinstance(pynbody.analysis.ionfrac.get_current_ion_table(), pynbody.analysis.ionfrac.IonFractionTable)
    with pynbody.analysis.ionfrac.use_custom_ion_table('v1'):
        assert not isinstance(pynbody.analysis.ionfrac.get_current_ion_table(), pynbody.analysis.ionfrac.IonFractionTable)
