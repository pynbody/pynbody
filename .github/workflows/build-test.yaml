name: Build and Test

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  fetch-testdata:
    runs-on: ubuntu-latest
    outputs:
      testdata-key: ${{ steps.get-testdata-hash.outputs.testdatahash }}
    steps:
    - uses: actions/checkout@v5
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install certifi
      run: |
        python -m pip install certifi
    - name: Get testdata hash
      id: get-testdata-hash
      run: |
        echo "testdatahash=$(python pynbody/test_utils/__init__.py)" >> $GITHUB_OUTPUT
    - name: Restore testdata cache
      uses: actions/cache/restore@v4
      id: cache-testdata
      with:
        path: tests/testdata
        key: testdata-${{ steps.get-testdata-hash.outputs.testdatahash }}
        enableCrossOsArchive: true
    - name: Fetch and unpack test data
      if: steps.cache-testdata.outputs.cache-hit != 'true'
      working-directory: tests
      run: |
        python ../pynbody/test_utils/__init__.py --fetch
    - name: Save testdata cache
      uses: actions/cache/save@v4
      if: always() && steps.cache-testdata.outputs.cache-hit != 'true'
      with:
        path: tests/testdata
        key: testdata-${{ steps.get-testdata-hash.outputs.testdatahash }}
        enableCrossOsArchive: true

  build:
    needs: fetch-testdata
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2025]
        python-version: ["3.11", "3.12", "3.13"]
        numpy-version: ["1.26.4", "2.0.2", "2.2.0"]
        exclude:
          - python-version: "3.12"
            numpy-version: "1.26.4"
          - python-version: "3.13"
            numpy-version: "1.26.4"
          - python-version: "3.13"
            numpy-version: "2.0.2"

    runs-on: ${{ matrix.os }}
    env:
      C: ${{ matrix.os == 'ubuntu-latest' && 'gcc-10' || '' }}
      CXX: ${{ matrix.os == 'ubuntu-latest' && 'g++-10' || '' }}
    steps:
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
    - uses: actions/checkout@v5
    - name: Install gcc (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update -qq
        sudo apt install -y gcc-10 g++-10
    - name: Install prerequisites
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install numpy==${{ matrix.numpy-version }}
    - name: Build and install pynbody
      run: |
        python -m pip install -v .[tests]

    - name: Restore testdata cache
      uses: actions/cache/restore@v4
      with:
        path: tests/testdata
        key: testdata-${{ needs.fetch-testdata.outputs.testdata-key }}
        enableCrossOsArchive: true
    - name: Run all tests
      working-directory: tests
      run: python -m pytest --ignore=testdata/ --tb=short
    # Following is temporarily necessary because of the >2.0.0rc1 numpy version
    - name: sanitize artifact name
      if: always()
      run: |
        TARGET_SANI=$(echo "images-${{ matrix.python-version }}-${{ matrix.numpy-version }}-${{ matrix.os }}" | tr ">" "_")
        echo "TARGET_SANI=${TARGET_SANI}" >> "$GITHUB_ENV"
    - name: Upload test images
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: ${{ env.TARGET_SANI }}
        path: tests/result*.npy
