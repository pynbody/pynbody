name: Build and Test

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        numpy-version: ["~=1.22.4'", "'", ">=2.0.0rc1' --pre"]
        exclude:
          - python-version: "3.12"
            numpy-version: "~=1.22.4'"
          - python-version: "3.13"
            numpy-version: "~=1.22.4'"

    runs-on: ${{ matrix.os }}
    env:
      C: gcc-10
      CXX: g++-10
    steps:
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
    - uses: actions/checkout@v4
    - name: Install gcc
      run: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update -qq
        sudo apt install -y gcc-10 g++-10
    - name: Install prerequisites
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install 'numpy${{ matrix.numpy-version }}
    - name: Build and install pynbody
      run: |
        python -m pip install -v .[tests]
        echo "[ramses]" >> ~/.pynbodyrc
        echo "parallel-read=2" >> ~/.pynbodyrc

    - name: Get testdata hash
      id: get-testdata-hash
      working-directory: tests
      run: |
        echo "testdatahash=$(python -c 'import pynbody.test_utils as tu; print(tu.test_data_hash())')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache testdata
      uses: actions/cache@v3
      id: cache-testdata
      with:
        path: tests/testdata
        key: ${{ steps.get-testdata-hash.outputs.testdatahash }}
    - name: Fetch and unpack test data
      if: steps.cache-testdata.outputs.cache-hit != 'true'
      working-directory: tests
      run: |
        python -c "import pynbody.test_utils as tu; tu.precache_test_data()"
    - name: Run all tests
      working-directory: tests
      run: python -m pytest
    # Following is temporarily necessary because of the >2.0.0rc1 numpy version
    - name: sanitize artifact name
      if: always()
      run: |
        TARGET_SANI=$(echo "images-${{ matrix.python-version }}-${{ matrix.numpy-version }}" | tr ">" "_")
        echo "TARGET_SANI=${TARGET_SANI}" >> "$GITHUB_ENV"
    - name: Upload test images
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: ${{ env.TARGET_SANI }}
        path: tests/result*.npy
