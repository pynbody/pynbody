name: Push to PyPI

on:
  push:
    tags: v*
  pull_request:
    branches:
      - master
    paths:
      - '.github/workflows/pypi.yaml'

  workflow_dispatch:


jobs:
  fetch-testdata:
    runs-on: ubuntu-latest
    outputs:
      testdata-key: ${{ steps.get-testdata-hash.outputs.testdatahash }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install certifi
      run: |
        python -m pip install certifi
    - name: Get testdata hash
      id: get-testdata-hash
      run: |
        echo "testdatahash=$(python pynbody/test_utils/__init__.py)" >> $GITHUB_OUTPUT
    - name: Restore testdata cache
      uses: actions/cache/restore@v4
      id: cache-testdata
      with:
        path: tests/testdata
        key: testdata-${{ steps.get-testdata-hash.outputs.testdatahash }}
        enableCrossOsArchive: true
    - name: Fetch and unpack test data
      if: steps.cache-testdata.outputs.cache-hit != 'true'
      working-directory: tests
      run: |
        python ../pynbody/test_utils/__init__.py --fetch
    - name: Save testdata cache
      uses: actions/cache/save@v4
      if: always() && steps.cache-testdata.outputs.cache-hit != 'true'
      with:
        path: tests/testdata
        key: testdata-${{ steps.get-testdata-hash.outputs.testdatahash }}
        enableCrossOsArchive: true

  build_wheels:
    name: Build wheels on ${{ matrix.buildplat[0] }} ${{ matrix.buildplat[2] }} ${{ matrix.python}}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      matrix:
        # Following numpy's setup
        buildplat:
        - [ubuntu-24.04, manylinux, x86_64, "", ""]
        - [ubuntu-24.04-arm, manylinux, aarch64, "", ""]
        - [macos-13, macosx, x86_64, "/usr/local", "13.0"]
        - [macos-13-xlarge, macosx, arm64, "/opt/homebrew", "13.0"]
        - [windows-2022, win, amd64, "", ""]
        - [windows-11-arm, win, arm64, "", ""]
        python: ["cp311", "cp312", "cp313"]
    steps:
      - uses: actions/checkout@v4

      - name: Install GCC (Ubuntu)
        if: startsWith(matrix.buildplat[0], 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt install gcc-10 g++-10
          echo "CC=gcc-10" >> $GITHUB_ENV
          echo "CXX=g++-10" >> $GITHUB_ENV

      - name: Install GCC (MacOS)
        if: startsWith(matrix.buildplat[0], 'macos')
        shell: bash
        run: |
          brew install gcc@13 pipx
          echo "CC=${{matrix.buildplat[3]}}/bin/gcc-13" >> $GITHUB_ENV
          echo "CXX=${{matrix.buildplat[3]}}/bin/g++-13" >> $GITHUB_ENV

      # - name: Determine version tag
      #   if: github.event_name != 'pull_request'
      #   run: |
      #     echo "SETUP_VERSION=`python setup.py --version`" >> $GITHUB_ENV
      #     echo "VERSION_TAG=`git describe --tags | cut -c 2-`" >> $GITHUB_ENV

      # - name: Verify version naming is consistent
      #   if: github.event_name != 'pull_request'
      #   run: |
      #     if [ "${{ env.VERSION_TAG }}" == "${{ env.SETUP_VERSION }}" ]; then
      #         echo Git tag and python setup.py versions match: ${{ env.VERSION_TAG }}
      #     else
      #         echo Version label mismatch
      #         echo Git tag-derived version is ${{ env.VERSION_TAG }}
      #         echo setup.py-derived version is ${{ env.SETUP_VERSION }}
      #         exit 1;
      #     fi

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.0
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}_${{ matrix.buildplat[2] }}
          CIBW_ARCHS_MACOS: ${{ matrix.buildplat[2] }}
          CIBW_ARCHS_LINUX: ${{ matrix.buildplat[2] }}
          CIBW_ENVIRONMENT: >-
            MACOSX_DEPLOYMENT_TARGET=${{ matrix.buildplat[4] }}

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.python }}-${{ matrix.buildplat[1] }}_${{ matrix.buildplat[2] }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.12'

      - name: Install numpy and cython
        run: python -m "pip" install 'numpy>=2.0.0' cython setuptools

      - name: Build sdist
        run: python setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-source
          path: dist/*.tar.gz

  test_wheels:
    needs: [build_wheels, build_sdist, fetch-testdata]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2025, macos-13]
        python-version: ["3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - uses: actions/download-artifact@v4
        with:
          pattern: artifact-*
          merge-multiple: true
          path: dist
          
      - name: Install wheel
        run: |
          python -m pip install --upgrade pip
          # Install pynbody from local wheel without dependencies to ensure we test the built wheel
          python -m pip install pynbody --find-links dist --no-index --only-binary=pynbody --no-deps
          # Install test dependencies from PyPI (since they're not in our wheel artifacts)
          python -m pip install pynbody[tests]
          
      - name: Restore testdata cache
        uses: actions/cache/restore@v4
        with:
          path: tests/testdata
          key: testdata-${{ needs.fetch-testdata.outputs.testdata-key }}
          enableCrossOsArchive: true
          
      - name: Run tests
        working-directory: tests
        run: python -m pytest --ignore=testdata/ --tb=short

  upload_pypi:
    needs: [build_wheels, build_sdist, test_wheels]
    runs-on: ubuntu-latest
    environment: PyPI
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: artifact-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
